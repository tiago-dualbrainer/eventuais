# Generated by Django 5.0.13 on 2025-03-13 18:46

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('crm', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='Campaign Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('scheduled', 'Scheduled'), ('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='draft', max_length=20, verbose_name='Status')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='Start Date')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='End Date')),
                ('sent_count', models.PositiveIntegerField(default=0, verbose_name='Emails Sent')),
                ('open_count', models.PositiveIntegerField(default=0, verbose_name='Emails Opened')),
                ('click_count', models.PositiveIntegerField(default=0, verbose_name='Links Clicked')),
                ('bounce_count', models.PositiveIntegerField(default=0, verbose_name='Emails Bounced')),
                ('unsubscribe_count', models.PositiveIntegerField(default=0, verbose_name='Unsubscribes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_campaigns', to=settings.AUTH_USER_MODEL, verbose_name='Campaign Owner')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_campaigns', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, related_name='campaigns', to='crm.tag')),
            ],
            options={
                'verbose_name': 'Campaign',
                'verbose_name_plural': 'Campaigns',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='Dashboard Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('layout', models.JSONField(default=dict, verbose_name='Layout Configuration')),
                ('is_public', models.BooleanField(default=False, verbose_name='Public Dashboard')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_dashboards', to=settings.AUTH_USER_MODEL)),
                ('shared_with', models.ManyToManyField(blank=True, related_name='shared_dashboards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dashboard',
                'verbose_name_plural': 'Dashboards',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='Report Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('report_type', models.CharField(choices=[('sales', 'Sales Report'), ('activity', 'Activity Report'), ('contact', 'Contact Report'), ('campaign', 'Campaign Performance'), ('support', 'Support Analysis'), ('custom', 'Custom Report')], max_length=20, verbose_name='Report Type')),
                ('query_params', models.JSONField(default=dict, verbose_name='Query Parameters')),
                ('chart_type', models.CharField(blank=True, max_length=50, verbose_name='Chart Type')),
                ('display_columns', models.JSONField(default=list, verbose_name='Display Columns')),
                ('filters', models.JSONField(default=list, verbose_name='Filters')),
                ('sort_by', models.CharField(blank=True, max_length=100, verbose_name='Sort By')),
                ('sort_direction', models.CharField(choices=[('asc', 'Ascending'), ('desc', 'Descending')], default='desc', max_length=4, verbose_name='Sort Direction')),
                ('is_public', models.BooleanField(default=False, verbose_name='Public Report')),
                ('schedule_enabled', models.BooleanField(default=False, verbose_name='Enable Scheduling')),
                ('schedule_frequency', models.CharField(blank=True, max_length=50, verbose_name='Frequency')),
                ('schedule_recipients', models.JSONField(blank=True, default=list, verbose_name='Email Recipients')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_run_at', models.DateTimeField(blank=True, null=True, verbose_name='Last Run At')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_reports', to=settings.AUTH_USER_MODEL)),
                ('shared_with', models.ManyToManyField(blank=True, related_name='shared_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Report',
                'verbose_name_plural': 'Reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DashboardItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('position_x', models.PositiveSmallIntegerField(verbose_name='X Position')),
                ('position_y', models.PositiveSmallIntegerField(verbose_name='Y Position')),
                ('width', models.PositiveSmallIntegerField(default=1, verbose_name='Width')),
                ('height', models.PositiveSmallIntegerField(default=1, verbose_name='Height')),
                ('custom_title', models.CharField(blank=True, max_length=255, verbose_name='Custom Title')),
                ('dashboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='crm.dashboard')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dashboard_placements', to='crm.report')),
            ],
            options={
                'verbose_name': 'Dashboard Item',
                'verbose_name_plural': 'Dashboard Items',
                'unique_together': {('dashboard', 'position_x', 'position_y')},
            },
        ),
        migrations.AddField(
            model_name='dashboard',
            name='reports',
            field=models.ManyToManyField(related_name='dashboards', through='crm.DashboardItem', to='crm.report'),
        ),
        migrations.CreateModel(
            name='Segment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='Segment Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('criteria', models.JSONField(help_text='JSON definition of segment filters', verbose_name='Segment Criteria')),
                ('contact_count', models.PositiveIntegerField(default=0, verbose_name='Contact Count')),
                ('is_dynamic', models.BooleanField(default=True, help_text='If true, membership updates automatically based on criteria', verbose_name='Dynamic Segment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_segments', to=settings.AUTH_USER_MODEL)),
                ('static_contacts', models.ManyToManyField(blank=True, related_name='static_segments', to='crm.contact')),
            ],
            options={
                'verbose_name': 'Segment',
                'verbose_name_plural': 'Segments',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SupportTicket',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('subject', models.CharField(max_length=255, verbose_name='Subject')),
                ('description', models.TextField(verbose_name='Description')),
                ('status', models.CharField(choices=[('new', 'New'), ('open', 'Open'), ('pending', 'Pending'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='new', max_length=20, verbose_name='Status')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=20, verbose_name='Priority')),
                ('category', models.CharField(blank=True, max_length=100, verbose_name='Category')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Resolved At')),
                ('due_by', models.DateTimeField(blank=True, null=True, verbose_name='Due By')),
                ('is_overdue', models.BooleanField(default=False, verbose_name='Is Overdue')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_tickets', to='crm.account')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to=settings.AUTH_USER_MODEL)),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_tickets', to='crm.contact')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tickets', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, related_name='support_tickets', to='crm.tag')),
            ],
            options={
                'verbose_name': 'Support Ticket',
                'verbose_name_plural': 'Support Tickets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField(verbose_name='Message')),
                ('is_customer', models.BooleanField(default=False, verbose_name='From Customer')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ticket_messages', to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='crm.supportticket')),
            ],
            options={
                'verbose_name': 'Ticket Message',
                'verbose_name_plural': 'Ticket Messages',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='CampaignRecipient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('opened', 'Opened'), ('clicked', 'Clicked'), ('bounced', 'Bounced'), ('unsubscribed', 'Unsubscribed')], default='pending', max_length=20, verbose_name='Status')),
                ('sent_at', models.DateTimeField(blank=True, null=True, verbose_name='Sent At')),
                ('opened_at', models.DateTimeField(blank=True, null=True, verbose_name='Opened At')),
                ('clicked_at', models.DateTimeField(blank=True, null=True, verbose_name='Clicked At')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipients', to='crm.campaign')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaign_interactions', to='crm.contact')),
            ],
            options={
                'verbose_name': 'Campaign Recipient',
                'verbose_name_plural': 'Campaign Recipients',
                'unique_together': {('campaign', 'contact')},
            },
        ),
        migrations.CreateModel(
            name='MarketingEmail',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='Template Name')),
                ('subject', models.CharField(max_length=255, verbose_name='Email Subject')),
                ('html_content', models.TextField(verbose_name='HTML Content')),
                ('text_content', models.TextField(blank=True, help_text="Plain text version for email clients that don't support HTML", verbose_name='Text Content')),
                ('sequence_order', models.PositiveSmallIntegerField(default=0, verbose_name='Sequence Order')),
                ('delay_days', models.PositiveSmallIntegerField(default=0, help_text='Days to wait before sending this email', verbose_name='Delay (Days)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emails', to='crm.campaign')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_email_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Marketing Email',
                'verbose_name_plural': 'Marketing Emails',
                'ordering': ['campaign', 'sequence_order'],
                'unique_together': {('campaign', 'sequence_order')},
            },
        ),
    ]
